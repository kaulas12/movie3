{"ast":null,"code":"import _asyncToGenerator from \"/home/devyani/React/movie3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/devyani/React/movie3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport { useState, useEffect } from \"react\"; // setting the api link\n\nexport var API_URL = \"http://www.omdbapi.com/?i=tt3896198&apikey=cf4f2368\";\n\nvar useFetch = function useFetch(apiParams) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState({\n    show: \"false\",\n    msg: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isError = _useState4[0],\n      setIsError = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      movie = _useState6[0],\n      setMovie = _useState6[1];\n\n  var getMovie = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url) {\n      var res, data;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            setIsLoading(true);\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(url);\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            data = _context.sent;\n            console.log(data);\n\n            if (data.Response === \"True\") {\n              setIsLoading(false);\n              setMovie(data.Search || data);\n              setIsError({\n                show: \"false\",\n                msg: \"\"\n              });\n            } else {\n              setIsError({\n                show: \"true\",\n                msg: data.Error\n              });\n            }\n\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function getMovie(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(); // debouncing in react js\n\n\n  useEffect(function () {\n    var timeOut = setTimeout(function () {\n      getMovie(\"\".concat(API_URL, \"&s=\").concat(apiParams));\n    }, 1000);\n    console.log(\"set\");\n    return function () {\n      clearTimeout(timeOut);\n      console.log(\"clear\");\n    };\n  }, [apiParams]);\n  return {\n    isLoading: isLoading,\n    isError: isError,\n    movie: movie\n  };\n};\n\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","API_URL","useFetch","apiParams","isLoading","setIsLoading","show","msg","isError","setIsError","movie","setMovie","getMovie","url","fetch","res","json","data","console","log","Response","Search","Error","timeOut","setTimeout","clearTimeout"],"sources":["/home/devyani/React/movie3/src/useFetch.js"],"sourcesContent":["import  { useState, useEffect } from \"react\";\n\n// setting the api link\nexport const API_URL = `http://www.omdbapi.com/?i=tt3896198&apikey=cf4f2368`;\n\n\nconst useFetch = (apiParams) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState({ show: \"false\", msg: \"\" });\n  const [movie, setMovie] = useState(null);\n\n  const getMovie = async (url) => {\n    setIsLoading(true);\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n\n      console.log(data);\n      if (data.Response === \"True\") {\n        setIsLoading(false);\n        setMovie(data.Search || data);\n        setIsError({ show: \"false\", msg: \"\" });\n      } else {\n        setIsError({ show: \"true\", msg: data.Error });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // debouncing in react js\n  useEffect(() => {\n    let timeOut = setTimeout(() => {\n      getMovie(`${API_URL}&s=${apiParams}`);\n    }, 1000);\n    console.log(\"set\");\n    return () => {\n      clearTimeout(timeOut);\n      console.log(\"clear\");\n    };\n  }, [apiParams]);\n\n  return { isLoading, isError, movie };\n};\n\nexport default useFetch;\n"],"mappings":";;;+CACA,oJ;;AADA,SAAUA,QAAV,EAAoBC,SAApB,QAAqC,OAArC,C,CAEA;;AACA,OAAO,IAAMC,OAAO,wDAAb;;AAGP,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAe;EAAA,gBACIJ,QAAQ,CAAC,IAAD,CADZ;EAAA;EAAA,IACvBK,SADuB;EAAA,IACZC,YADY;;EAAA,iBAEAN,QAAQ,CAAC;IAAEO,IAAI,EAAE,OAAR;IAAiBC,GAAG,EAAE;EAAtB,CAAD,CAFR;EAAA;EAAA,IAEvBC,OAFuB;EAAA,IAEdC,UAFc;;EAAA,iBAGJV,QAAQ,CAAC,IAAD,CAHJ;EAAA;EAAA,IAGvBW,KAHuB;EAAA,IAGhBC,QAHgB;;EAK9B,IAAMC,QAAQ;IAAA,sEAAG,iBAAOC,GAAP;MAAA;MAAA;QAAA;UAAA;YACfR,YAAY,CAAC,IAAD,CAAZ;YADe;YAAA;YAAA,OAGKS,KAAK,CAACD,GAAD,CAHV;;UAAA;YAGPE,GAHO;YAAA;YAAA,OAIMA,GAAG,CAACC,IAAJ,EAJN;;UAAA;YAIPC,IAJO;YAMbC,OAAO,CAACC,GAAR,CAAYF,IAAZ;;YACA,IAAIA,IAAI,CAACG,QAAL,KAAkB,MAAtB,EAA8B;cAC5Bf,YAAY,CAAC,KAAD,CAAZ;cACAM,QAAQ,CAACM,IAAI,CAACI,MAAL,IAAeJ,IAAhB,CAAR;cACAR,UAAU,CAAC;gBAAEH,IAAI,EAAE,OAAR;gBAAiBC,GAAG,EAAE;cAAtB,CAAD,CAAV;YACD,CAJD,MAIO;cACLE,UAAU,CAAC;gBAAEH,IAAI,EAAE,MAAR;gBAAgBC,GAAG,EAAEU,IAAI,CAACK;cAA1B,CAAD,CAAV;YACD;;YAbY;YAAA;;UAAA;YAAA;YAAA;YAebJ,OAAO,CAACC,GAAR;;UAfa;UAAA;YAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAARP,QAAQ;MAAA;IAAA;EAAA,GAAd,CAL8B,CAwB9B;;;EACAZ,SAAS,CAAC,YAAM;IACd,IAAIuB,OAAO,GAAGC,UAAU,CAAC,YAAM;MAC7BZ,QAAQ,WAAIX,OAAJ,gBAAiBE,SAAjB,EAAR;IACD,CAFuB,EAErB,IAFqB,CAAxB;IAGAe,OAAO,CAACC,GAAR,CAAY,KAAZ;IACA,OAAO,YAAM;MACXM,YAAY,CAACF,OAAD,CAAZ;MACAL,OAAO,CAACC,GAAR,CAAY,OAAZ;IACD,CAHD;EAID,CATQ,EASN,CAAChB,SAAD,CATM,CAAT;EAWA,OAAO;IAAEC,SAAS,EAATA,SAAF;IAAaI,OAAO,EAAPA,OAAb;IAAsBE,KAAK,EAALA;EAAtB,CAAP;AACD,CArCD;;AAuCA,eAAeR,QAAf"},"metadata":{},"sourceType":"module"}